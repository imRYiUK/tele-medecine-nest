generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TypeEtablissement {
  HOPITAL
  CLINIQUE
  CABINET
  LABORATOIRE
  PHARMACIE
}

model Patient {
  patientID     String   @id @default(uuid())
  nom           String
  prenom        String
  dateNaissance DateTime
  genre         String
  adresse       String
  telephone     String
  email         String?
  groupeSanguin String
  createdBy     String
  updatedAt     DateTime
  createdAt     DateTime

  // Relations
  dossierMedical DossierMedical?
  consultations  ConsultationMedicale[]
  examens        ExamenMedical[]
  creator        Utilisateur            @relation(fields: [createdBy], references: [utilisateurID])
  RendezVous     RendezVous[]

  @@map("patients")
}

model DossierMedical {
  dossierID    String   @id @default(uuid())
  patientID    String   @unique
  dateCreation DateTime @default(now())
  etatDossier  String
  createdAt    DateTime
  createdBy    String

  // Relations
  patient       Patient                @relation(fields: [patientID], references: [patientID])
  creator       Utilisateur            @relation(fields: [createdBy], references: [utilisateurID])
  consultations ConsultationMedicale[]
  examens       ExamenMedical[]

  @@map("dossiers_medicaux")
}

model ConsultationMedicale {
  consultationID     String   @id @default(uuid())
  dossierID          String
  patientID          String
  medecinID          String
  dateConsultation   DateTime
  motif              String
  diagnostics        String
  observations       String
  traitementPrescrit String
  estTelemedicine    Boolean  @default(false)
  lienVisio          String?
  updatedAt          DateTime
  createdAt          DateTime

  // Relations
  dossier     DossierMedical  @relation(fields: [dossierID], references: [dossierID])
  patient     Patient         @relation(fields: [patientID], references: [patientID])
  medecin     Utilisateur     @relation(fields: [medecinID], references: [utilisateurID])
  examens     ExamenMedical[]
  ordonnances Ordonnance[]

  @@map("consultations_medicales")
}

model ExamenMedical {
  examenID       String   @id @default(uuid())
  dossierID      String
  patientID      String
  typeExamenID   String
  demandeParID   String
  dateExamen     DateTime
  description    String
  resultat       String?
  estAnalyse     Boolean  @default(false)
  consultationID String?

  // Relations
  dossier      DossierMedical        @relation(fields: [dossierID], references: [dossierID])
  patient      Patient               @relation(fields: [patientID], references: [patientID])
  typeExamen   TypeExamen            @relation(fields: [typeExamenID], references: [typeExamenID])
  demandePar   Utilisateur           @relation(fields: [demandeParID], references: [utilisateurID])
  consultation ConsultationMedicale? @relation(fields: [consultationID], references: [consultationID])
  images       ImageMedicale[]
  radiologues  Utilisateur[]         @relation("ExamensRadiologues")

  @@map("examens_medicaux")
}

model TypeExamen {
  typeExamenID String @id @default(uuid())
  nomType      String
  description  String
  categorie    String

  // Relations
  examens ExamenMedical[]

  @@map("types_examens")
}

model ImageMedicale {
  imageID           String   @id @default(uuid())
  examenID          String
  studyInstanceUID  String
  seriesInstanceUID String
  sopInstanceUID    String
  dateAcquisition   DateTime
  modalite          String
  description       String

  // Relations
  examen ExamenMedical @relation(fields: [examenID], references: [examenID])

  @@map("images_medicales")
}

model Utilisateur {
  utilisateurID   String  @id @default(uuid())
  nom             String
  prenom          String
  username        String  @unique
  password        String
  email           String  @unique
  telephone       String
  role            String
  etablissementID String?
  estActif        Boolean @default(true)

  // Relations
  etablissement         Etablissement?         @relation(fields: [etablissementID], references: [etablissementID])
  consultations         ConsultationMedicale[]
  examensOrdonnes       ExamenMedical[]
  activites             JournalActivite[]
  DossierMedicalCreated DossierMedical[]
  Patient               Patient[]
  Notification          Notification[]
  examensInvites        ExamenMedical[]        @relation("ExamensRadiologues")
  rendezVousMedecin     RendezVous[]           @relation("MedecinRendezVous")
  rendezVousCrees       RendezVous[]           @relation("CreateurRendezVous")
  HoraireMedecin        HoraireMedecin[]

  @@map("utilisateurs")
}

model Etablissement {
  etablissementID String            @id @default(uuid())
  nom             String
  adresse         String
  telephone       String
  email           String
  type            TypeEtablissement
  region          String
  description     String?
  siteWeb         String?
  estActif        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  utilisateurs     Utilisateur[]
  journalActivites JournalActivite[]

  @@map("etablissements")
}

model Prescription {
  prescriptionID String @id @default(uuid())
  ordonnanceID   String
  medicamentID   String
  posologie      String
  duree          String
  instructions   String

  // Relations
  ordonnance Ordonnance @relation(fields: [ordonnanceID], references: [ordonnanceID])
  medicament Medicament @relation(fields: [medicamentID], references: [medicamentID])

  @@map("prescriptions")
}

model Ordonnance {
  ordonnanceID    String   @id @default(uuid())
  consultationID  String
  dateEmission    DateTime @default(now())
  dateExpiration  DateTime
  estRenouvelable Boolean  @default(false)

  // Relations
  consultation  ConsultationMedicale @relation(fields: [consultationID], references: [consultationID])
  prescriptions Prescription[]

  @@map("ordonnances")
}

model Medicament {
  medicamentID String  @id @default(uuid())
  nom          String
  dosage       String
  forme        String
  description  String?

  // Relations
  prescriptions Prescription[]

  @@map("medicaments")
}

model JournalActivite {
  journalID       String   @id @default(uuid())
  utilisateurID   String
  etablissementID String?
  dateAction      DateTime @default(now())
  typeAction      String
  description     String
  ipAdresse       String?

  // Relations
  utilisateur   Utilisateur    @relation(fields: [utilisateurID], references: [utilisateurID])
  etablissement Etablissement? @relation(fields: [etablissementID], references: [etablissementID])

  @@map("journal_activites")
}

model Notification {
  notificationID String      @id @default(uuid())
  utilisateurID  String
  titre          String
  message        String
  type           String?
  lien           String?
  dateCreation   DateTime    @default(now())
  estLu          Boolean     @default(false)
  utilisateur    Utilisateur @relation(fields: [utilisateurID], references: [utilisateurID])

  @@index([utilisateurID])
}

model RendezVous {
  rendezVousID String   @id @default(uuid())
  dateHeure    DateTime
  motif        String?
  patientID    String
  medecinID    String
  createdByID  String
  createdAt    DateTime @default(now())

  // Relations
  patient   Patient     @relation(fields: [patientID], references: [patientID])
  medecin   Utilisateur @relation("MedecinRendezVous", fields: [medecinID], references: [utilisateurID])
  createdBy Utilisateur @relation("CreateurRendezVous", fields: [createdByID], references: [utilisateurID])
}

model HoraireMedecin {
  horaireID   String @id @default(uuid())
  medecinID   String
  jourSemaine Int // 0 = Dimanche, 1 = Lundi, ..., 6 = Samedi
  heureDebut  String // Format 'HH:mm'
  heureFin    String // Format 'HH:mm'

  // Relations
  medecin Utilisateur @relation(fields: [medecinID], references: [utilisateurID])
}
