generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  patientID      String          @id @default(uuid())
  nom            String
  prenom         String
  dateNaissance  DateTime
  genre          String
  adresse        String
  telephone      String
  email          String?
  groupeSanguin  String
  createdBy      String
  updatedAt      DateTime        @updatedAt
  createdAt      DateTime        @default(now())
  RendezVous     RendezVous[]
  dossierMedical DossierMedical?
  examens        ExamenMedical[]
  creator        Utilisateur     @relation(fields: [createdBy], references: [utilisateurID])

  @@map("patients")
}

model DossierMedical {
  dossierID     String                 @id @default(uuid())
  patientID     String                 @unique
  dateCreation  DateTime               @default(now())
  etatDossier   String
  createdBy     String
  createdAt     DateTime               @default(now())
  consultations ConsultationMedicale[]
  creator       Utilisateur            @relation(fields: [createdBy], references: [utilisateurID])
  patient       Patient                @relation(fields: [patientID], references: [patientID])
  examens       ExamenMedical[]

  @@map("dossiers_medicaux")
}

model ConsultationMedicale {
  consultationID     String          @id @default(uuid())
  dossierID          String
  medecinID          String
  dateConsultation   DateTime
  motif              String
  diagnostics        String
  observations       String
  traitementPrescrit String
  estTelemedicine    Boolean         @default(false)
  lienVisio          String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  dossier            DossierMedical  @relation(fields: [dossierID], references: [dossierID])
  medecin            Utilisateur     @relation(fields: [medecinID], references: [utilisateurID])
  examens            ExamenMedical[]
  ordonnances        Ordonnance[]

  @@map("consultations_medicales")
}

model ExamenMedical {
  examenID        String                @id @default(uuid())
  dossierID       String
  patientID       String
  typeExamenID    String
  demandeParID    String
  dateExamen      DateTime
  description     String
  resultat        String?
  estAnalyse      Boolean               @default(false)
  consultationID  String?
  consultation    ConsultationMedicale? @relation(fields: [consultationID], references: [consultationID])
  demandePar      Utilisateur           @relation(fields: [demandeParID], references: [utilisateurID])
  dossier         DossierMedical        @relation(fields: [dossierID], references: [dossierID])
  patient         Patient               @relation(fields: [patientID], references: [patientID])
  typeExamen      TypeExamen            @relation(fields: [typeExamenID], references: [typeExamenID])
  images          ImageMedicale[]
  radiologues     Utilisateur[]         @relation("ExamensRadiologues")

  @@map("examens_medicaux")
}

model TypeExamen {
  typeExamenID String          @id @default(uuid())
  nomType      String
  description  String
  categorie    String
  examens      ExamenMedical[]

  @@map("types_examens")
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model ImageCollaboration {
  id        String              @id @default(uuid())
  imageID   String
  inviterID String
  inviteeID String
  status    CollaborationStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  image     ImageMedicale       @relation(fields: [imageID], references: [imageID])
  invitee   Utilisateur         @relation("Invitee", fields: [inviteeID], references: [utilisateurID])
  inviter   Utilisateur         @relation("Inviter", fields: [inviterID], references: [utilisateurID])
}

model ImageMedicale {
  imageID           String               @id @default(uuid())
  examenID          String
  studyInstanceUID  String
  seriesInstanceUID String
  sopInstanceUID    String
  dateAcquisition   DateTime
  modalite          String
  description       String
  url               String?              // URL to access the image (WADO, preview, etc.)
  orthancInstanceId String?              // ID de l'instance Orthanc pour l'acc√®s aux previews
  chatMessages      ChatMessage[]
  collaborations    ImageCollaboration[]
  examen            ExamenMedical        @relation(fields: [examenID], references: [examenID])

  @@map("images_medicales")
}

model Utilisateur {
  utilisateurID          String                 @id @default(uuid())
  nom                    String
  prenom                 String
  username               String                 @unique
  password               String
  email                  String                 @unique
  telephone              String
  role                   String
  etablissementID        String?
  estActif               Boolean                @default(true)
  chatMessages           ChatMessage[]
  HoraireMedecin         HoraireMedecin[]
  invitedCollaborations  ImageCollaboration[]   @relation("Invitee")
  sentInvitations        ImageCollaboration[]   @relation("Inviter")
  notificationsCreated   Notification[]         @relation("NotificationCreator")
  notificationRecipients NotificationRecipient[]
  rendezVousCrees        RendezVous[]           @relation("CreateurRendezVous")
  rendezVousMedecin      RendezVous[]           @relation("MedecinRendezVous")
  consultations          ConsultationMedicale[]
  DossierMedicalCreated  DossierMedical[]
  examensOrdonnes        ExamenMedical[]
  activites              JournalActivite[]
  Patient                Patient[]
  etablissement          Etablissement?         @relation(fields: [etablissementID], references: [etablissementID])
  examensInvites         ExamenMedical[]        @relation("ExamensRadiologues")

  @@map("utilisateurs")
}

model Etablissement {
  etablissementID  String            @id @default(uuid())
  nom              String
  adresse          String
  telephone        String
  email            String
  type             TypeEtablissement
  region           String
  createdAt        DateTime          @default(now())
  description      String?
  estActif         Boolean           @default(true)
  siteWeb          String?
  updatedAt        DateTime          @updatedAt
  orthancLogin     String?
  orthancPassword  String?
  orthancUrl       String?
  journalActivites JournalActivite[]
  utilisateurs     Utilisateur[]

  @@map("etablissements")
}

model Prescription {
  prescriptionID String     @id @default(uuid())
  ordonnanceID   String
  medicamentID   String
  posologie      String
  duree          String
  instructions   String
  medicament     Medicament @relation(fields: [medicamentID], references: [medicamentID])
  ordonnance     Ordonnance @relation(fields: [ordonnanceID], references: [ordonnanceID])

  @@map("prescriptions")
}

model Ordonnance {
  ordonnanceID    String               @id @default(uuid())
  consultationID  String
  dateEmission    DateTime             @default(now())
  dateExpiration  DateTime
  estRenouvelable Boolean              @default(false)
  consultation    ConsultationMedicale @relation(fields: [consultationID], references: [consultationID])
  prescriptions   Prescription[]

  @@map("ordonnances")
}

model Medicament {
  medicamentID  String         @id @default(uuid())
  nom           String
  prescriptions Prescription[]

  @@map("medicaments")
}

model JournalActivite {
  journalID       String         @id @default(uuid())
  utilisateurID   String
  dateAction      DateTime       @default(now())
  typeAction      String
  description     String
  ipAdresse       String?
  etablissementID String?
  etablissement   Etablissement? @relation(fields: [etablissementID], references: [etablissementID])
  utilisateur     Utilisateur    @relation(fields: [utilisateurID], references: [utilisateurID])

  @@map("journal_activites")
}

model Notification {
  notificationID String                  @id @default(uuid())
  titre          String
  message        String
  type           String?
  lien           String?
  dateCreation   DateTime                @default(now())
  createdByID    String
  createdBy      Utilisateur             @relation("NotificationCreator", fields: [createdByID], references: [utilisateurID])
  recipients     NotificationRecipient[]
}

model NotificationRecipient {
  id             String       @id @default(uuid())
  notificationID String
  utilisateurID  String
  estLu          Boolean      @default(false)
  dateLecture    DateTime?
  notification   Notification @relation(fields: [notificationID], references: [notificationID], onDelete: Cascade)
  utilisateur    Utilisateur  @relation(fields: [utilisateurID], references: [utilisateurID], onDelete: Cascade)

  @@unique([notificationID, utilisateurID])
}

model RendezVous {
  rendezVousID String      @id @default(uuid())
  motif        String?
  patientID    String
  medecinID    String
  createdByID  String
  createdAt    DateTime    @default(now())
  date         String
  debutTime    String
  endTime      String
  createdBy    Utilisateur @relation("CreateurRendezVous", fields: [createdByID], references: [utilisateurID])
  medecin      Utilisateur @relation("MedecinRendezVous", fields: [medecinID], references: [utilisateurID])
  patient      Patient     @relation(fields: [patientID], references: [patientID])
}

model HoraireMedecin {
  horaireID   String      @id @default(uuid())
  medecinID   String
  jourSemaine Int
  heureDebut  String
  heureFin    String
  medecin     Utilisateur @relation(fields: [medecinID], references: [utilisateurID])
}

model ChatMessage {
  messageID String        @id @default(uuid())
  imageID   String
  senderID  String
  content   String
  timestamp DateTime      @default(now())
  image     ImageMedicale @relation(fields: [imageID], references: [imageID])
  sender    Utilisateur   @relation(fields: [senderID], references: [utilisateurID])
}

enum TypeEtablissement {
  HOPITAL
  CLINIQUE
  CABINET
  LABORATOIRE
  PHARMACIE
}